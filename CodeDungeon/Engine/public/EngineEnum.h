#pragma once

namespace Engine {

	enum PAWNTYPE : int
	{
		PAWN_CHAR,
		PAWN_PLAYER,
		PAWN_ITEM,
		PAWN_STATICOBJ,
		PAWN_PROJECTILE,
		PAWN_ECT
	};

	enum ITEMTYPE : int
	{
		ITEM_EQUIP, 
		ITEM_POSITION, 
		ITEM_OBJECT, 
		ITEM_MONEY,
		ITEM_END
	};

	enum EQUIPTYPE : int
	{
		EQUIP_WEAPON,
		EQUIP_DEFENSIVEGEAR,
		
		EQUIP_END
	};

	enum WEAPONTYPE : int
	{
		WEAPON_SWORD, 
		WEAPON_BOW, 
		WEAPON_END
	};

	enum DEFENSIVEGEARTYPE : int
	{
		DFGEAR_BOOTS = WEAPON_END,
		
		DFGEAR_END
	};

	enum TEXTYPE : unsigned short
	{
		TextureType_NONE = 0,
		TextureType_DIFFUSE = 1,
		TextureType_SPECULAR = 2,
		TextureType_AMBIENT = 3,
		TextureType_EMISSIVE = 4,
		TextureType_HEIGHT = 5,
		TextureType_NORMALS = 6,
		TextureType_SHINNESS = 7,
		TextureType_OPACITY = 8,
		TextureType_DISPLACEMENT = 9,
		TextureType_LIGHTMAP = 10,
		TextureType_REFLECTION = 11,
		TextureType_BASE_COLOR = 12,
		TextureType_NORMAL_CAMERA = 13,
		TextureType_EIMISSION_COLOR = 14,
		TextureType_METALNESS = 15,
		TextureType_DIFFUSE_ROUGHTNESS = 16,
		TextureType_AMBIENT_OCCLUSION = 17,
		TextureType_END = 18
	};

	/*
	@ Date: 2024-05-01 Writer: 박태현
	@ Explain
	- . Sound의 종류를 정의한다. 
	*/
	enum SOUNDTYPE : _int {
		SOUND_BACKGROUND, SOUND_GAME, SOUND_MUMMY, SOUND_PLAYER, SOUND_ANUBIS, SOUND_HARLEQUINN, SOUND_MINOTAUR, SOUND_MIMIC, SOUND_END
	};

	/*
	@ Date: 2024-02-10, Writer: 박태현
	@ Explain
	- . 애니메이션 카테고리를 정의한다. 
	*/
	enum class ANIMEVENTCATEGORY : _int {
		CATEGROY_SECTION, 
		CATEGROY_OCCUR,
		CATEGROY_END
	};
	/*
	@ Date: 2024-02-10, Writer: 박태현
	@ Explain
	- 애니메이션 Event를 위해 필요한 객체를 정의함
	*/
	enum ANIMEVENTTYPE : _int {
		ANIMEVENT_EFFECT,     // 이펙트 발생 			
		ANIMEVENT_SOUND,     // 소리 발생 
		ANIMEVENT_COLLIDER,	  // 콜라이더 발생
		ANIMEVENT_CAMERA,    // 카메라 따라다님
		ANIMEVENT_OBJACTIVE, // OBJ활성화
		ANIMEVENT_ANIMCHANGESBETWEEN,
		ANIMEVENT_ANIMOCCURSTIMEPASS,
		ANIMEVENT_END
	};

	typedef enum ERenderID : _ubyte
	{
		// 첫 번째 그려질 것
		RI_NONALPHA_PRIORITY, RI_SHADOW,RI_NORPOS_FORABILITY, RI_NORPOS,RI_DEPTHRECORD, RI_NONALPHA_FIRST, RI_NONALPHA_LAST, RI_NONALPHA_MIDDLE, RI_ALPHA, RI_DISTORTION, RI_NOLIGHT, RI_3DUI, RI_2DUIPRIORITY, RI_2DUIMIDDLE, RI_2DUILAST, RI_TARGETS,
		RI_END
	}RENDERID;
	typedef enum EDebugRederID : _ubyte
	{
		DEBUG_RI_MAP, DEBUG_RI_PLAYER, DEBUG_RI_ETC, DEBUG_RI_END
	}DEBUGRENDERID;

	// Render Object Type 
	enum class GRAPHICRENDEROBJECT_TYPE : unsigned short {
		COMMON, LIGHT, ALPHA, NONALPHA,
		BLEND, MIRROR_1, MIRROR_2, RENDEROBJECT_END
	};

	enum  class ROOT_REGISTER_TYPE : unsigned short
	{
		COMMON, GRAPHI_LIGHT,
		// Compute는 따로 정의
		COMPUTE_COMMON, ROOT_REGISTER_END
	};

	enum ROOT_REGISTER_SPACE : unsigned short
	{
		ROOTREGISTER_SPACE_COMMON = 0,
		ROOTREGISTER_SPACE_LIGHT = 1,
	};

	enum class GRAPHICISCONTROLTYPE : unsigned char
	{
		GRAPHICS, COMPUTE, TYPE_END
	};

	


	// Light
	enum class  LIGHTTYPE { TYPE_DIRECTIONAL, TYPE_POINT, TYPE_SPOT, LIGHT_END };

	enum class LIGHTACTIVE{ NONACTIVE,ISACTIVE,TYPE_END};

	enum  SHADERMAININFO : unsigned short {
		VS_MAIN = 0,
		HS_MAIN,
		DS_MAIN,
		GS_MAIN,
		PS_MAIN,
		CS_MAIN,
	};

	enum class DESCRIPTOR_TYPE : unsigned short {
		SRV, RTV, DSV, UAV, TYPE_END
	};

	enum class RASTERIZER_TYPE : unsigned short {
		CULL_NONE,
		CULL_FRONT,
		CULL_BACK,
		WIREFRAME,
	};

	enum class DEPTH_STENCIL_TYPE : unsigned short {
		LESS,
		LESS_EQUAL,
		GREATER,
		GREATER_EQUAL,
		NO_DEPTH_TEST, // 깊이 테스트(X) + 깊이 기록(O)
		NO_DEPTH_TEST_NO_WRITE, // 깊이 테스트(X) + 깊이 기록(X)
		LESS_NO_WRITE, // 깊이 테스트(O) + 깊이 기록(X)
		LESS_EQUAL_NO_WRITE, // 깊이 테스트(O) + 깊이 기록(X)
	};

	enum class BLEND_TYPE : unsigned short {
		DEFAULT,
		ALPHA_BLEND,
		ONE_TO_ONE_BLEND,
		ADD_BLEND,
		BLEND_END,
	};


	enum class CBV_REGISTER : unsigned short {
		B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, CBV_END

		, VIEWPROJ = B0
		, DEFFEREDPARAMS = B1
		,STATICLIGHT = B2	
		, TRANSFORM = B3
		, LIGHTCONTROL = B4
		
		, MODELDATA = B10
		, ANIMMODEL = B11
		, BONEMATRIX = B12
		, PREVBONEMATRIX = B13
		, ANIMMODELRIMDRAW = B14
		, BUTTONUI = B13
	
		, NORMALCUBEPARAM = B13
		, ALLPARTICLEBUFFER = B13
		, PARTICLETYPEBUFFER = B14
		, BLOODTIMERBUFFER = B14

		, OUTLINESCALE = B6
		, OUTLINECOLOR = B9
		
		, WATERPARAM = B14
		, SOCKETMATRIX = B13
		, ANIMATEPARTICLEPARAM = B12
		, TESSTERRAINFACTOR = B13
		, FIRENOISEBUFFER = B13
		, FIREDISTORTION = B14
		, TRAILCOLOR = B14
		, FOGBUFFER = B14
		, TURNSHADERBOOL = B14
		, MODELCHECKBUF = B7
		, MODELPIVOTMATRIX = B8
	};

	enum class SRV_REGISTER : unsigned short {
		T0 = static_cast<unsigned int>(CBV_REGISTER::CBV_END),
		T1,
		T2,
		T3,
		T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,T14,

		SRV_END
	};

	enum class UAV_REGISTER : unsigned short {
		U0 = static_cast<unsigned int>(SRV_REGISTER::SRV_END),
		U1,
		U2, U3, U4, U5, U6, U7, U8, U9, U10, U11, U12, U13, U14,

		UAV_END,

		ANIMTEXTURE = U0,

		PARTICLEWRITEDATA = U0,
		SHRAEDDATA = U1,

	};

	enum class TEXTURECREATETYPE : unsigned short {
		TEX2D, TEXCUBE, TEXDIMMESION, TEXARRAY, TEX_END
	};

	enum class RTGROUPID {
		DEFAULT = 0,
		LIGHTSHADE_DEFFERED,
		SHADOW_MAP,
		NONALPHA_DEFFERED,
		OUTLINE_POS_NOR,
		OUTLINE_POS_NOR_FORABILITY,
		DEPTH_RECORD,
		ALPHA_DEFFERED,
		BLOOM,
		DOWNSAMPLE,
		DOWNSAMPLETWO,
		UPSAMPLE,
		UPSAMPLEGRAY,
		BLUR,
		BLUR_RESULT,
		HDR,
		HDRTWO,
		GRAY_SCALE,
		UI2D_DEFFERED,
		BLEND_DEFFERED,
		MOTIONBLUR_DEFFERED,
		MIDDLERENDERSCREEN_DEFFERED,
		ENDGROUP = 10000
	};

	enum class RTOBJID {
		SWAPCHAIN1 = 0,
		SWAPCHAIN2 = 1,
		SWAPCHAIN3 = 2,

		SHADOW_DEPTH_FOURBYFOUR,


		OUTLINE_DEPTH_POS_FORABILITY,
		OUTLINE_DEPTH_POS,
		DEPTH_RECORD,


		BLOOM,
		BLUR,
		DOWNSAMPLE,
		DOWNSAMPLETWO,
		UPSAMPLE,
		UPSAMPLEGRAY,
		HDR,
		HDRTWO,
		GRAY_SCALE,
		BLUR_RESULT,

		LIGHTSHADE_AMBIENT_DEFFERED,
		LIGHTSHADE_SHADE_DEFFERED,
		LIGHTSHADE_SPECULAR_DEFFERED,
	
		NONALPHA_DIFFUSE_DEFFERED,
		NONALPHA_GLOW_DEFFERED,
		NONALPHA_SPECULAR_DEFFERED,
		NONALPHA_NORMAL_DEFFERED,
		NONALPHA_DEPTH_DEFFERED,
		NONALPHA_POSITION_DEFFERED,
		NONALPHA_VELOCITY_DEFFERED,

		ALPHA_DIFFUSE_DEFFERED,
		ALPHA_GLOW_DEFFERED,
		ALPHA_BLUR_DEFFERED,

		BLEND_SCREEN_DEFFERED,

		UI2D_SCREEN_DEFFERED,

		RTOBJ_END,

		MOTIONBLUR_DIFFUSE_DEFFERED,
		MOTIONBLUR_JUDGECOLOR_DEFFERED,

		MIDDLERENDER_DIFFUSE_DEFFERED,

		RTGROUP_LIGHTSHADE_DEFFERED_CNT = 3,
		RTGROUP_NONALPHA_DEFFERED_CNT = 4,
		RTGROUP_ALPHA_DEFFERED_CNT = 3,
		RTGROUP_BLEND_DEFFERED_CNT = 1
	};

	enum class CLONETYPE : unsigned char {
		CLONE_STATIC, CLONE_ONCE, CLONE_REMAINVALUE, CLONE_END
	};

	enum class BACKINGTYPE : unsigned char {
		STATIC, DYNAMIC, NON, BACKING_END
	};

	enum class USECOLLISIONTYPE : unsigned char {
		ACTIVE, DISABLE, USECOLL_END
	};

	enum PARTICLE_KIND:_uint {
		PARTICLE_ORIGINAL,
		PARTICLE_ROTATION,
		PARTICLE_FLARE,
		PARTICLE_BLOOD,
		PARTICLE_ATTACK,
		PARTICLE_HEAL,
		PARTICLE_OPENCHEST,
		PARTICLE_FOOTPRINT,
		PARTICLE_SLASH,
		PARTICLE_ANIM,
		PARTICLE_END
	};

	enum  GLOBAL_CBUFFERTYPE : _ubyte
	{
		GLOBAL_VIEWPROJ,
		GLOBAL_DEFFEREDPARAMS,
		GLOBAL_LIGHTSTATIC,
		GLOBAL_BUFFER_END
	};

	enum PREALLOCATED_CBUFFERTYPE :_ubyte
	{
		PREALLOCATED_TRANSFORM,
		PREALLOCATED_BUFFER_END
	};

	enum PARTICLE_TYPE {
		PARTICLE_TYPE_DEFAULT,
		PARTICLE_TYPE_AUTO
	};

	enum PARTICLE_LIFETIME_TYPE {
		PARTICLE_LIFETIME_TYPE_DEFAULT,
		PARTICLE_LIFETIME_TYPE_AUTO
	};

	enum class CAMERATYPE
	{
		MAIN, DEFFERED,SMALL_DEFFERED, SHADOWLIGHT, OTHER,
	};

	enum class VIBUFFERTYPE
	{
		GENERIC, NORMAL, BUFFEREND
	};

	enum DIMOUSEMOVE : _ubyte { DIMM_X, DIMM_Y, DIMM_WHEEL, DIMM_END };
	enum DIMOUSEBUTTON : _ubyte { DIMB_L, DIMB_R, DIMB_WHEEL, DIMB_END };
	enum class CURSOR_LOCKMODE { LOCKED, CONFINED, NONE, EMPTY };

	enum VALUES
	{
		MAIN_CAMERA_ID = static_cast<_uint>(CAMERATYPE::MAIN),
		DEFFERED_CAMERA_ID = static_cast<_uint>(CAMERATYPE::DEFFERED),
		SMALL_DEFFERED_CAMERA_ID = static_cast<_uint>(CAMERATYPE::SMALL_DEFFERED),
		SHADOWLIGHT_CAMERA_ID = static_cast<_uint>(CAMERATYPE::SHADOWLIGHT),
		SWAP_CHAIN_END = 3,
		GRAPHICS_CONSTANT_BUFFER_VALUE = 3,
		COMPUTE_CONSTANT_BUFFER_VALUE = 0,
		LIGHT_CONSTANT_BUFFER_VALUE = 1,
		CBV_REGISTER_END = CBV_REGISTER::CBV_END,
		SRV_REGISTER_END = 15,
		UAV_REGISTER_END = 15,
		REGISTER_CNT = (CBV_REGISTER_END + SRV_REGISTER_END + UAV_REGISTER_END),

		LIGHT_CBV_REGISTER_END = 3,
		LIGHT_SRV_REGISTER_END = 5,

		SCENE_STATIC_VALUE = 0,
		MAX_HAS_TEX = 4,


		// Clone Max Size
		CLONE_MAX_SIZE = static_cast<unsigned int>(CLONETYPE::CLONE_END),
		RTTARGET_LIGHTSHADE_DEFFERED_MAXNUM = static_cast<unsigned int>(RTOBJID::RTGROUP_LIGHTSHADE_DEFFERED_CNT),
		RTTARGET_NONALPHA_DEFFERED_MAXNUM = static_cast<unsigned int>(RTOBJID::RTGROUP_NONALPHA_DEFFERED_CNT),
		RTTARGET_ALPHA_DEFFERED_MAX_NUM = static_cast<unsigned int>(RTOBJID::RTGROUP_ALPHA_DEFFERED_CNT),
		RTTARGET_BLEND_DEFFERED_MAXNUM = static_cast<unsigned int>(RTOBJID::RTGROUP_BLEND_DEFFERED_CNT),

		MAX_KEYSIZE = 256,
		MAX_FRUSTOMSIZE = 8,

		MAX_LIGHTS = 100,
		MAX_CAM_SIZE = 10,
		MAX_BONE_SIZE = 512,
		MAX_THREAD_COMMAND_CNT = 18,
		MAX_RENDERPASS_CNT = 2,
		MAX_SCREEN_RENDERING_CNT = 10,

		MAX_ROOT_REGISTER_CNT = static_cast<unsigned int>(ROOT_REGISTER_TYPE::ROOT_REGISTER_END),
		MAX_RENDEROBJECT_CNT = static_cast<unsigned int>(GRAPHICRENDEROBJECT_TYPE::RENDEROBJECT_END),

		COMMON_GRAPHICS_REGISTER_CNT = CBV_REGISTER_END + SRV_REGISTER_END,
		LIGHT_GRAPHICS_REGISTER_CNT = LIGHT_CBV_REGISTER_END + LIGHT_SRV_REGISTER_END,
		MAX_BUFFER_LENGTH = 512,
		MAX_PROCESSBUF_LENGTH = MAX_BUFFER_LENGTH * 10,
		MAX_CHANNEL_CNT = 32,
		// 머터리얼 파람의 숫자를 정하는 Enum 
		MAX_MATERIALPARAM_CNT = 500,
		MAX_ASSIMP_MATERIAL_TEXTURE_CNT = TEXTYPE::TextureType_END,
		MAX_MOUSEBTN_CNT = DIMOUSEBUTTON::DIMB_END,
		MAX_THREAD_CNT = 2,
	};
}
